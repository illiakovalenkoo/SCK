 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.34 (git sha1 4a1b5599258, gcc 13.2.1 -march=x86-64 -mtune=generic -O2 -fno-plt -fexceptions -fstack-clash-protection -fcf-protection -ffile-prefix-map=/build/yosys/src=/usr/src/debug/yosys -fPIC -Os)


-- Executing script file `run.ys' --

1. Executing Verilog-2005 frontend: arith_unit_26.sv
Parsing SystemVerilog input from `arith_unit_26.sv' to AST representation.
Generating RTLIL representation for module `\arith_unit_26'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \arith_unit_26_rtl

2.2. Analyzing design hierarchy..
Top module:  \arith_unit_26_rtl
Removing unused module `\arith_unit_26'.
Removed 1 unused modules.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \arith_unit_26_rtl

3.1.2. Analyzing design hierarchy..
Top module:  \arith_unit_26_rtl
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$arith_unit_26.sv:0$2 in module arith_unit_26_rtl.
Marked 28 switch rules as full_case in process $proc$arith_unit_26.sv:0$2 in module arith_unit_26_rtl.
Marked 1 switch rules as full_case in process $proc$arith_unit_26.sv:194$73 in module arith_unit_26_rtl.
Removed a total of 1 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 8 assignments to connections.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \i_reset in `\arith_unit_26_rtl.$proc$arith_unit_26.sv:194$73'.

3.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~28 debug messages>

3.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\arith_unit_26_rtl.$proc$arith_unit_26.sv:0$2'.
     1/42: $4\ONES[0:0]
     2/42: $10\NOT_EVEN_1[0:0]
     3/42: $9\NOT_EVEN_1[0:0]
     4/42: $3\ONES[0:0]
     5/42: $8\NOT_EVEN_1[0:0]
     6/42: $7\NOT_EVEN_1[0:0]
     7/42: $6\NOT_EVEN_1[0:0]
     8/42: $5\NOT_EVEN_1[0:0]
     9/42: $4\NOT_EVEN_1[0:0]
    10/42: $3\NOT_EVEN_1[0:0]
    11/42: $2\NOT_EVEN_1[0:0]
    12/42: $1\NOT_EVEN_1[0:0]
    13/42: $2\ONES[0:0]
    14/42: $1\ONES[0:0]
    15/42: $16\s_result[3:0]
    16/42: $3\OVERFLOW[0:0]
    17/42: $9\ERROR[0:0]
    18/42: $15\s_result[3:0]
    19/42: $14\s_result[3:0]
    20/42: $2\OVERFLOW[0:0]
    21/42: $8\ERROR[0:0]
    22/42: $7\ERROR[0:0]
    23/42: $13\s_result[3:0]
    24/42: $12\s_result[3:0]
    25/42: $6\ERROR[0:0]
    26/42: $11\s_result[3:0]
    27/42: $5\ERROR[0:0]
    28/42: $10\s_result[3:0]
    29/42: $9\s_result[3:0]
    30/42: $8\s_result[3:0]
    31/42: $7\s_result[3:0]
    32/42: $6\s_result[3:0]
    33/42: $5\s_result[3:0]
    34/42: $4\s_result[3:0]
    35/42: $4\ERROR[0:0]
    36/42: $3\s_result[3:0]
    37/42: $3\ERROR[0:0]
    38/42: $2\s_result[3:0]
    39/42: $2\ERROR[0:0]
    40/42: $1\ERROR[0:0]
    41/42: $1\s_result[3:0]
    42/42: $1\OVERFLOW[0:0]
Creating decoders for process `\arith_unit_26_rtl.$proc$arith_unit_26.sv:194$73'.
     1/2: $1\o_status[3:0]
     2/2: $1\o_result[3:0]

3.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\arith_unit_26_rtl.\s_result' from process `\arith_unit_26_rtl.$proc$arith_unit_26.sv:0$2'.
No latch inferred for signal `\arith_unit_26_rtl.\ERROR' from process `\arith_unit_26_rtl.$proc$arith_unit_26.sv:0$2'.
No latch inferred for signal `\arith_unit_26_rtl.\NOT_EVEN_1' from process `\arith_unit_26_rtl.$proc$arith_unit_26.sv:0$2'.
No latch inferred for signal `\arith_unit_26_rtl.\ONES' from process `\arith_unit_26_rtl.$proc$arith_unit_26.sv:0$2'.
No latch inferred for signal `\arith_unit_26_rtl.\OVERFLOW' from process `\arith_unit_26_rtl.$proc$arith_unit_26.sv:0$2'.
No latch inferred for signal `\arith_unit_26_rtl.\i' from process `\arith_unit_26_rtl.$proc$arith_unit_26.sv:0$2'.

3.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\arith_unit_26_rtl.\o_result' using process `\arith_unit_26_rtl.$proc$arith_unit_26.sv:194$73'.
  created $adff cell `$procdff$377' with positive edge clock and negative level reset.
Creating register for signal `\arith_unit_26_rtl.\o_status' using process `\arith_unit_26_rtl.$proc$arith_unit_26.sv:194$73'.
  created $adff cell `$procdff$378' with positive edge clock and negative level reset.

3.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 28 empty switches in `\arith_unit_26_rtl.$proc$arith_unit_26.sv:0$2'.
Removing empty process `arith_unit_26_rtl.$proc$arith_unit_26.sv:0$2'.
Removing empty process `arith_unit_26_rtl.$proc$arith_unit_26.sv:194$73'.
Cleaned up 28 empty switches.

3.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module arith_unit_26_rtl.
<suppressed ~67 debug messages>

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module arith_unit_26_rtl.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arith_unit_26_rtl..
Removed 16 unused cells and 155 unused wires.
<suppressed ~17 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
Checking module arith_unit_26_rtl...
Found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module arith_unit_26_rtl.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arith_unit_26_rtl'.
<suppressed ~102 debug messages>
Removed a total of 34 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \arith_unit_26_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $procmux$167: \i_arg_A -> { 1'0 \i_arg_A [2:0] }
      Replacing known input bits on port A of cell $procmux$287: \i_arg_A -> { 1'0 \i_arg_A [2:0] }
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$126.
    dead port 2/2 on $mux $procmux$132.
    dead port 1/2 on $mux $procmux$135.
    dead port 2/2 on $mux $procmux$138.
    dead port 2/2 on $mux $procmux$140.
    dead port 2/2 on $mux $procmux$146.
    dead port 2/2 on $mux $procmux$148.
    dead port 2/2 on $mux $procmux$154.
    dead port 2/2 on $mux $procmux$156.
    dead port 2/2 on $mux $procmux$162.
    dead port 2/2 on $mux $procmux$164.
    dead port 2/2 on $mux $procmux$169.
    dead port 2/2 on $mux $procmux$174.
    dead port 2/2 on $mux $procmux$179.
    dead port 1/2 on $mux $procmux$186.
    dead port 1/2 on $mux $procmux$189.
    dead port 2/2 on $mux $procmux$191.
    dead port 1/2 on $mux $procmux$208.
    dead port 2/2 on $mux $procmux$210.
    dead port 1/2 on $mux $procmux$217.
    dead port 2/2 on $mux $procmux$219.
    dead port 2/2 on $mux $procmux$225.
    dead port 2/2 on $mux $procmux$231.
    dead port 1/2 on $mux $procmux$239.
    dead port 2/2 on $mux $procmux$241.
    dead port 1/2 on $mux $procmux$244.
    dead port 2/2 on $mux $procmux$246.
    dead port 2/2 on $mux $procmux$254.
    dead port 1/2 on $mux $procmux$257.
    dead port 2/2 on $mux $procmux$259.
    dead port 1/2 on $mux $procmux$267.
    dead port 2/2 on $mux $procmux$269.
    dead port 2/2 on $mux $procmux$277.
    dead port 2/2 on $mux $procmux$279.
    dead port 2/2 on $mux $procmux$281.
    dead port 2/2 on $mux $procmux$289.
    dead port 2/2 on $mux $procmux$291.
    dead port 2/2 on $mux $procmux$298.
    dead port 2/2 on $mux $procmux$314.
    dead port 1/2 on $mux $procmux$317.
    dead port 2/2 on $mux $procmux$320.
    dead port 2/2 on $mux $procmux$322.
    dead port 2/2 on $mux $procmux$331.
    dead port 2/2 on $mux $procmux$333.
    dead port 2/2 on $mux $procmux$342.
    dead port 2/2 on $mux $procmux$344.
    dead port 2/2 on $mux $procmux$352.
    dead port 2/2 on $mux $procmux$360.
    dead port 1/2 on $mux $procmux$102.
    dead port 1/2 on $mux $procmux$110.
    dead port 1/2 on $mux $procmux$118.
    dead port 1/2 on $mux $procmux$78.
    dead port 1/2 on $mux $procmux$83.
    dead port 1/2 on $mux $procmux$94.
Removed 54 multiplexer ports.
<suppressed ~8 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \arith_unit_26_rtl.
    New ctrl vector for $pmux cell $procmux$372: { $auto$opt_reduce.cc:134:opt_pmux$380 $procmux$141_CMP }
  Optimizing cells in module \arith_unit_26_rtl.
Performed a total of 1 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arith_unit_26_rtl'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

3.6.6. Executing OPT_DFF pass (perform DFF optimizations).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arith_unit_26_rtl..
Removed 0 unused cells and 90 unused wires.
<suppressed ~1 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module arith_unit_26_rtl.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \arith_unit_26_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \arith_unit_26_rtl.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arith_unit_26_rtl'.
Removed a total of 0 cells.

3.6.13. Executing OPT_DFF pass (perform DFF optimizations).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arith_unit_26_rtl..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module arith_unit_26_rtl.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing FSM pass (extract and optimize FSM).

3.7.1. Executing FSM_DETECT pass (finding FSMs in design).

3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arith_unit_26_rtl..

3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module arith_unit_26_rtl.

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arith_unit_26_rtl'.
Removed a total of 0 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \arith_unit_26_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \arith_unit_26_rtl.
Performed a total of 0 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arith_unit_26_rtl'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arith_unit_26_rtl..

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module arith_unit_26_rtl.

3.8.9. Finished OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 4) from port Y of cell arith_unit_26_rtl.$not$arith_unit_26.sv:106$45 ($not).
Removed top 1 bits (of 4) from port A of cell arith_unit_26_rtl.$not$arith_unit_26.sv:106$45 ($not).
Removed top 31 bits (of 32) from port B of cell arith_unit_26_rtl.$sub$arith_unit_26.sv:130$54 ($sub).
Removed top 29 bits (of 32) from port Y of cell arith_unit_26_rtl.$sub$arith_unit_26.sv:130$54 ($sub).
Removed top 1 bits (of 4) from port A of cell arith_unit_26_rtl.$sub$arith_unit_26.sv:130$54 ($sub).
Removed top 1 bits (of 2) from port B of cell arith_unit_26_rtl.$procmux$247_CMP0 ($eq).
Removed top 1 bits (of 4) from mux cell arith_unit_26_rtl.$procmux$287 ($mux).
Removed top 1 bits (of 4) from wire arith_unit_26_rtl.$6\s_result[3:0].
Removed top 1 bits (of 4) from wire arith_unit_26_rtl.$not$arith_unit_26.sv:106$45_Y.
Removed top 29 bits (of 32) from wire arith_unit_26_rtl.$sub$arith_unit_26.sv:130$54_Y.

3.10. Executing PEEPOPT pass (run peephole optimizers).

3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arith_unit_26_rtl..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

3.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module arith_unit_26_rtl:
  creating $macc model for $sub$arith_unit_26.sv:130$54 ($sub).
  creating $alu model for $macc $sub$arith_unit_26.sv:130$54.
  creating $alu model for $gt$arith_unit_26.sv:59$12 ($gt): new $alu
  creating $alu model for $lt$arith_unit_26.sv:74$17 ($lt): merged with $gt$arith_unit_26.sv:59$12.
  creating $alu cell for $gt$arith_unit_26.sv:59$12, $lt$arith_unit_26.sv:74$17: $auto$alumacc.cc:485:replace_alu$385
  creating $alu cell for $sub$arith_unit_26.sv:130$54: $auto$alumacc.cc:485:replace_alu$396
  created 2 $alu and 0 $macc cells.

3.13. Executing SHARE pass (SAT-based resource sharing).

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module arith_unit_26_rtl.
<suppressed ~2 debug messages>

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arith_unit_26_rtl'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \arith_unit_26_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \arith_unit_26_rtl.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arith_unit_26_rtl'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arith_unit_26_rtl..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module arith_unit_26_rtl.

3.14.9. Rerunning OPT passes. (Maybe there is more to do..)

3.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \arith_unit_26_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

3.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \arith_unit_26_rtl.
Performed a total of 0 changes.

3.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arith_unit_26_rtl'.
Removed a total of 0 cells.

3.14.13. Executing OPT_DFF pass (perform DFF optimizations).

3.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arith_unit_26_rtl..

3.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module arith_unit_26_rtl.

3.14.16. Finished OPT passes. (There is nothing left to do.)

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

3.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arith_unit_26_rtl..

3.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arith_unit_26_rtl..

3.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arith_unit_26_rtl..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module arith_unit_26_rtl.
<suppressed ~22 debug messages>

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arith_unit_26_rtl'.
Removed a total of 0 cells.

3.17.3. Executing OPT_DFF pass (perform DFF optimizations).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arith_unit_26_rtl..
Removed 2 unused cells and 10 unused wires.
<suppressed ~3 debug messages>

3.17.5. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module arith_unit_26_rtl.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arith_unit_26_rtl'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \arith_unit_26_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \arith_unit_26_rtl.
Performed a total of 0 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arith_unit_26_rtl'.
Removed a total of 0 cells.

3.19.6. Executing OPT_SHARE pass.

3.19.7. Executing OPT_DFF pass (perform DFF optimizations).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arith_unit_26_rtl..

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module arith_unit_26_rtl.

3.19.10. Finished OPT passes. (There is nothing left to do.)

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
Using template $paramod$constmap:caa849dc115b22349251b6d1fd2e89817490b7c3$paramod$a0b0c98a58ef63f32f9322f3719ac7c44f2cb5e6\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using template $paramod$b8c0a997bce700f23568a5ada79cc6781d1f5ca0\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using template $paramod$78e969f2586efcf3a5b0b0440bcca0db83d5cca2\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod$78e969f2586efcf3a5b0b0440bcca0db83d5cca2\_90_div for cells of type $div.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$d629d85c8826a74239b9178d1930215a43b0ceb0\_90_pmux for cells of type $pmux.
Using template $paramod$c2e415ef15bc3ccd2723772353a6b450d3d76206\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $adff.
Using template $paramod$78e969f2586efcf3a5b0b0440bcca0db83d5cca2\$__div_mod_trunc for cells of type $__div_mod_trunc.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $reduce_or.
Running "alumacc" on wrapper $extern:wrap:$neg:Y_WIDTH=3:A_WIDTH=3:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:Y_WIDTH=3:A_WIDTH=3:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:Y_WIDTH=3:A_WIDTH=3:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $ne.
Using template $paramod\$__div_mod_u\WIDTH=32'00000000000000000000000000000011 for cells of type $__div_mod_u.
Using template $paramod$7af24cf7f572852703f08ef7a936c59efa2c57af\_90_alu for cells of type $alu.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=3:B_WIDTH=3:A_WIDTH=3:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=3:B_WIDTH=3:A_WIDTH=3:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=3:B_WIDTH=3:A_WIDTH=3:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=3:A_WIDTH=3:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=3:A_WIDTH=3:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=3:A_WIDTH=3:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=4:B_WIDTH=4:A_WIDTH=3:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=4:B_WIDTH=4:A_WIDTH=3:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=4:B_WIDTH=4:A_WIDTH=3:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=4:A_WIDTH=3:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=4:A_WIDTH=3:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=4:A_WIDTH=3:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=5:B_WIDTH=5:A_WIDTH=3:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=5:B_WIDTH=5:A_WIDTH=3:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=5:B_WIDTH=5:A_WIDTH=3:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=5:A_WIDTH=3:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=5:A_WIDTH=3:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=5:A_WIDTH=3:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod$1a3a0c35c4a4896fbfd612699525c057298e72d2\_90_alu for cells of type $alu.
Using template $paramod$03eba0cdd46566f6651a3011e0b5671fa6b5e494\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
No more expansions possible.
<suppressed ~1121 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module arith_unit_26_rtl.
<suppressed ~304 debug messages>

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arith_unit_26_rtl'.
<suppressed ~165 debug messages>
Removed a total of 55 cells.

3.21.3. Executing OPT_DFF pass (perform DFF optimizations).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arith_unit_26_rtl..
Removed 56 unused cells and 537 unused wires.
<suppressed ~57 debug messages>

3.21.5. Finished fast OPT passes.

3.22. Executing ABC pass (technology mapping using ABC).

3.22.1. Extracting gate netlist of module `\arith_unit_26_rtl' to `<abc-temp-dir>/input.blif'..
Extracted 196 gates and 207 wires to a netlist network with 10 inputs and 8 outputs.

3.22.1.1. Executing ABC.
Running ABC command: "abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.1.2. Re-integrating ABC results.
ABC RESULTS:              XNOR cells:        6
ABC RESULTS:               NOR cells:        9
ABC RESULTS:               MUX cells:       22
ABC RESULTS:               NOT cells:       12
ABC RESULTS:               XOR cells:       10
ABC RESULTS:             ORNOT cells:       13
ABC RESULTS:              NAND cells:        9
ABC RESULTS:                OR cells:       34
ABC RESULTS:            ANDNOT cells:       45
ABC RESULTS:        internal signals:      189
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:        8
Removing temp directory.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module arith_unit_26_rtl.
<suppressed ~7 debug messages>

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arith_unit_26_rtl'.
Removed a total of 0 cells.

3.23.3. Executing OPT_DFF pass (perform DFF optimizations).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arith_unit_26_rtl..
Removed 2 unused cells and 129 unused wires.
<suppressed ~3 debug messages>

3.23.5. Finished fast OPT passes.

3.24. Executing HIERARCHY pass (managing design hierarchy).

3.24.1. Analyzing design hierarchy..
Top module:  \arith_unit_26_rtl

3.24.2. Analyzing design hierarchy..
Top module:  \arith_unit_26_rtl
Removed 0 unused modules.

3.25. Printing statistics.

=== arith_unit_26_rtl ===

   Number of wires:                163
   Number of wire bits:            210
   Number of public wires:          13
   Number of public wire bits:      60
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                166
     $_ANDNOT_                      45
     $_DFF_PN0_                      8
     $_MUX_                         22
     $_NAND_                         9
     $_NOR_                          9
     $_NOT_                         10
     $_ORNOT_                       13
     $_OR_                          34
     $_XNOR_                         6
     $_XOR_                         10

3.26. Executing CHECK pass (checking for obvious problems).
Checking module arith_unit_26_rtl...
Found and reported 0 problems.

4. Executing ABC pass (technology mapping using ABC).

4.1. Extracting gate netlist of module `\arith_unit_26_rtl' to `<abc-temp-dir>/input.blif'..
Extracted 158 gates and 168 wires to a netlist network with 10 inputs and 8 outputs.

4.1.1. Executing ABC.
Running ABC command: "abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 7 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.1.2. Re-integrating ABC results.
ABC RESULTS:                OR cells:       56
ABC RESULTS:               NOT cells:       21
ABC RESULTS:               XOR cells:        6
ABC RESULTS:               AND cells:       85
ABC RESULTS:        internal signals:      150
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:        8
Removing temp directory.

5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arith_unit_26_rtl..
Removed 0 unused cells and 168 unused wires.
<suppressed ~1 debug messages>

6. Executing Verilog backend.

6.1. Executing BMUXMAP pass.

6.2. Executing DEMUXMAP pass.
Dumping module `\arith_unit_26_rtl'.

7. Printing statistics.

=== arith_unit_26_rtl ===

   Number of wires:                173
   Number of wire bits:            220
   Number of public wires:          13
   Number of public wire bits:      60
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                176
     $_AND_                         85
     $_DFF_PN0_                      8
     $_NOT_                         21
     $_OR_                          56
     $_XOR_                          6

   Estimated number of transistors:        960+

End of script. Logfile hash: d7753ee4aa, CPU: user 0.57s system 0.02s, MEM: 29.15 MB peak
Yosys 0.34 (git sha1 4a1b5599258, gcc 13.2.1 -march=x86-64 -mtune=generic -O2 -fno-plt -fexceptions -fstack-clash-protection -fcf-protection -ffile-prefix-map=/build/yosys/src=/usr/src/debug/yosys -fPIC -Os)
Time spent: 32% 2x abc (0 sec), 20% 23x opt_expr (0 sec), ...  
